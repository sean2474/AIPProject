// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Senya"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login to the system and receive an authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Authenticate user",
                "parameters": [
                    {
                        "description": "User login information",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/restTypes.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restTypes.LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/testToken": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Greets the user with \"Hello, {userName}!\" if he's authorized",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Greet the user if he's authorized",
                "responses": {
                    "200": {
                        "description": "Hello, {userName}!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Greets the user with \"Hello, {userName}!\" if he's authorized",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Greet the user if he's authorized",
                "responses": {
                    "200": {
                        "description": "Hello, {userName}!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data/daily-schedule/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves the daily schedule image for the current date from the database",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "image/jpeg"
                ],
                "tags": [
                    "DailySchedule"
                ],
                "summary": "Get the daily schedule image for the current date",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Uploads the daily schedule image for the current date to the database",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DailySchedule"
                ],
                "summary": "Upload the daily schedule image for the current date",
                "parameters": [
                    {
                        "type": "file",
                        "description": "The daily schedule image file",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/restTypes.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/data/daily-schedule/{date}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates the daily schedule image for a specific date in the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DailySchedule"
                ],
                "summary": "Update the daily schedule for a specific date",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The date of the daily schedule to update (in YYYY-MM-DD format)",
                        "name": "date",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "The updated image file for the daily schedule (limit: 32 MB)",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restTypes.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Deletes the daily schedule for a specific date from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DailySchedule"
                ],
                "summary": "Delete the daily schedule for a specific date",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The date of the daily schedule to delete (in YYYY-MM-DD format)",
                        "name": "date",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restTypes.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/data/food-menu/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves the breakfast, lunch, and dinner menu for the current date from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FoodMenu"
                ],
                "summary": "Get the food menu for the current date",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/databaseTypes.FoodMenu"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Add a new food menu to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FoodMenu"
                ],
                "summary": "Add a food menu",
                "operationId": "addFoodMenu",
                "parameters": [
                    {
                        "description": "Food menu to add",
                        "name": "foodMenu",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/databaseTypes.FoodMenu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restTypes.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/data/food-menu/{date}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a food menu from the database for a given date",
                "tags": [
                    "FoodMenu"
                ],
                "summary": "Delete a food menu",
                "operationId": "DeleteFoodMenu",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The date of the food menu to delete",
                        "name": "date",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restTypes.DeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/data/food-menu/{id}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update the food menu with the specified ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FoodMenu"
                ],
                "summary": "Update a food menu",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the food menu to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New values for the food menu",
                        "name": "foodMenu",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/databaseTypes.FoodMenu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restTypes.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/data/lost-and-found/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves a list of all lost and found items from the database and returns them as a JSON array in the response body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LostAndFound"
                ],
                "summary": "Get all lost and found items",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/databaseTypes.LostAndFound"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Adds a lost and found item to the database and uploads an image file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LostAndFound"
                ],
                "summary": "Add a lost and found item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lost/found item",
                        "name": "item_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description of the lost/found item",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Date the item was found",
                        "name": "date_found",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Location where the item was found",
                        "name": "location_found",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Status of the item (lost or found)",
                        "name": "status",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Image of the lost/found item",
                        "name": "image_file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/restTypes.LostAndFoundPostResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/restTypes.LostAndFoundErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/restTypes.LostAndFoundErrorResponse"
                        }
                    }
                }
            }
        },
        "/data/lost-and-found/image/{id}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing lost and found item in the database with the specified ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LostAndFound"
                ],
                "summary": "Update a lost and found item",
                "operationId": "update-lost-and-found-item",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lost and found item ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Item name",
                        "name": "item_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Item description",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Date the item was found",
                        "name": "date_found",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Location where the item was found",
                        "name": "location_found",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Status of the lost and found item",
                        "name": "status",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Image file of the lost and found item",
                        "name": "image_file",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restTypes.LostAndFoundErrorResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/restTypes.LostAndFoundErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/restTypes.LostAndFoundErrorResponse"
                        }
                    }
                }
            }
        },
        "/data/lost-and-found/image/{imageID}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Fetches the image file for a lost and found item with the specified ID from the database and returns it as a JPEG image in the response body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "image/jpeg"
                ],
                "tags": [
                    "LostAndFound"
                ],
                "summary": "Get the image file for a lost and found item by ID.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the lost and found item to retrieve the image file for.",
                        "name": "imageID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The image file for the specified lost and found item.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "The specified lost and found item ID was not found in the database.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "databaseTypes.FoodMenu": {
            "type": "object",
            "properties": {
                "breakfast": {
                    "type": "string",
                    "example": "Omelette"
                },
                "date": {
                    "type": "string",
                    "example": "2022-01-01"
                },
                "dinner": {
                    "type": "string",
                    "example": "Grilled chicken"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "lunch": {
                    "type": "string",
                    "example": "Pasta"
                }
            }
        },
        "databaseTypes.LostAndFound": {
            "type": "object",
            "properties": {
                "date_found": {
                    "type": "string",
                    "example": "2022-01-01T12:00:00Z"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "image_file": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "image_url": {
                    "type": "string"
                },
                "item_name": {
                    "type": "string",
                    "example": "Backpack"
                },
                "location_found": {
                    "type": "string",
                    "example": "Library"
                },
                "status": {
                    "type": "integer",
                    "example": 1
                },
                "submitter_id": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "databaseTypes.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "rfid_token": {
                    "type": "string",
                    "example": "RFID_TOKEN_12345"
                },
                "user_type": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "restTypes.DeleteResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "restTypes.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code of the error response.\n\nExample: 400\n\nRequired: true",
                    "type": "integer"
                },
                "message": {
                    "description": "Error message.\n\nExample: Invalid request\n\nRequired: true",
                    "type": "string"
                }
            }
        },
        "restTypes.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "User's password.\n\nExample: mypassword123\n\nRequired: true",
                    "type": "string",
                    "example": "password1"
                },
                "username": {
                    "description": "User's email or username.\n\nRequired: true",
                    "type": "string",
                    "example": "johnsmith@example.com"
                }
            }
        },
        "restTypes.LoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message indicating the result of the login attempt.\n\nExample: Login successful\n\nRequired: true",
                    "type": "string",
                    "example": "Login successful"
                },
                "status": {
                    "description": "Status of the login attempt.\n\nExample: success\n\nRequired: true",
                    "type": "string",
                    "example": "success"
                },
                "token": {
                    "description": "JWT token to be used for authentication in future requests.\n\nExample: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n\nRequired: true",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                },
                "user_data": {
                    "description": "User data associated with the logged-in user.\n\nRequired: false\n@name User\n@in body\n@description User data associated with the logged-in user.\n\nExample: {\"id\":123,\"first_name\":\"John\",\"last_name\":\"Doe\",\"email\":\"user@example.com\",\"user_type\":\"student\"}",
                    "allOf": [
                        {
                            "$ref": "#/definitions/databaseTypes.User"
                        }
                    ]
                }
            }
        },
        "restTypes.LostAndFoundErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "restTypes.LostAndFoundPostResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Go Rest API with Swagger for school system",
	Description:      "Simple swagger implementation in Go HTTP",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
