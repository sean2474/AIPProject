// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Senya"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login to the system and receive an authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Authenticate user",
                "parameters": [
                    {
                        "description": "User login information",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/restTypes.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restTypes.LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/testToken": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Greets the user with \"Hello, {userName}!\" if he's authorized",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Greet the user if he's authorized",
                "responses": {
                    "200": {
                        "description": "Hello, {userName}!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Greets the user with \"Hello, {userName}!\" if he's authorized",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Greet the user if he's authorized",
                "responses": {
                    "200": {
                        "description": "Hello, {userName}!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/food-menu/": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves the breakfast, lunch, and dinner menu for the current date from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FoodMenu"
                ],
                "summary": "Get the food menu for the current date",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/databaseTypes.FoodMenu"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Add a new food menu to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FoodMenu"
                ],
                "summary": "Add a food menu",
                "operationId": "addFoodMenu",
                "parameters": [
                    {
                        "description": "Food menu to add",
                        "name": "foodMenu",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/databaseTypes.FoodMenu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restTypes.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/food-menu/{date}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a food menu from the database for a given date",
                "tags": [
                    "FoodMenu"
                ],
                "summary": "Delete a food menu",
                "operationId": "deleteFoodMenu",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The date of the food menu to delete",
                        "name": "date",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restTypes.DeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/food-menu/{id}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update the food menu with the specified ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FoodMenu"
                ],
                "summary": "Update a food menu",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the food menu to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New values for the food menu",
                        "name": "foodMenu",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/databaseTypes.FoodMenu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/restTypes.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/restTypes.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "databaseTypes.FoodMenu": {
            "type": "object",
            "properties": {
                "breakfast": {
                    "type": "string",
                    "example": "Omelette"
                },
                "date": {
                    "type": "string",
                    "example": "2022-01-01"
                },
                "dinner": {
                    "type": "string",
                    "example": "Grilled chicken"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "lunch": {
                    "type": "string",
                    "example": "Pasta"
                }
            }
        },
        "databaseTypes.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "rfid_token": {
                    "type": "string",
                    "example": "RFID_TOKEN_12345"
                },
                "user_type": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "restTypes.DeleteResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "restTypes.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code of the error response.\n\nExample: 400\n\nRequired: true",
                    "type": "integer"
                },
                "message": {
                    "description": "Error message.\n\nExample: Invalid request\n\nRequired: true",
                    "type": "string"
                }
            }
        },
        "restTypes.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "User's password.\n\nExample: mypassword123\n\nRequired: true",
                    "type": "string",
                    "example": "password1"
                },
                "username": {
                    "description": "User's email or username.\n\nRequired: true",
                    "type": "string",
                    "example": "johnsmith@example.com"
                }
            }
        },
        "restTypes.LoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message indicating the result of the login attempt.\n\nExample: Login successful\n\nRequired: true",
                    "type": "string",
                    "example": "Login successful"
                },
                "status": {
                    "description": "Status of the login attempt.\n\nExample: success\n\nRequired: true",
                    "type": "string",
                    "example": "success"
                },
                "token": {
                    "description": "JWT token to be used for authentication in future requests.\n\nExample: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n\nRequired: true",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                },
                "user_data": {
                    "description": "User data associated with the logged-in user.\n\nRequired: false\n@name User\n@in body\n@description User data associated with the logged-in user.\n\nExample: {\"id\":123,\"first_name\":\"John\",\"last_name\":\"Doe\",\"email\":\"user@example.com\",\"user_type\":\"student\"}",
                    "allOf": [
                        {
                            "$ref": "#/definitions/databaseTypes.User"
                        }
                    ]
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Go Rest API with Swagger for school system",
	Description:      "Simple swagger implementation in Go HTTP",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
