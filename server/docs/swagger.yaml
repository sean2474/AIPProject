basePath: /api
definitions:
  databaseTypes.FoodMenu:
    properties:
      breakfast:
        example: Omelette
        type: string
      date:
        example: "2022-01-01"
        type: string
      dinner:
        example: Grilled chicken
        type: string
      id:
        example: 1
        type: integer
      lunch:
        example: Pasta
        type: string
    type: object
  databaseTypes.User:
    properties:
      email:
        example: johndoe@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 1
        type: integer
      last_name:
        example: Doe
        type: string
      rfid_token:
        example: RFID_TOKEN_12345
        type: string
      user_type:
        example: 2
        type: integer
    type: object
  restTypes.DeleteResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  restTypes.ErrorResponse:
    properties:
      code:
        description: |-
          HTTP status code of the error response.

          Example: 400

          Required: true
        type: integer
      message:
        description: |-
          Error message.

          Example: Invalid request

          Required: true
        type: string
    type: object
  restTypes.LoginRequest:
    properties:
      password:
        description: |-
          User's password.

          Example: mypassword123

          Required: true
        example: password1
        type: string
      username:
        description: |-
          User's email or username.

          Required: true
        example: johnsmith@example.com
        type: string
    type: object
  restTypes.LoginResponse:
    properties:
      message:
        description: |-
          Message indicating the result of the login attempt.

          Example: Login successful

          Required: true
        example: Login successful
        type: string
      status:
        description: |-
          Status of the login attempt.

          Example: success

          Required: true
        example: success
        type: string
      token:
        description: |-
          JWT token to be used for authentication in future requests.

          Example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

          Required: true
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        type: string
      user_data:
        allOf:
        - $ref: '#/definitions/databaseTypes.User'
        description: |-
          User data associated with the logged-in user.

          Required: false
          @name User
          @in body
          @description User data associated with the logged-in user.

          Example: {"id":123,"first_name":"John","last_name":"Doe","email":"user@example.com","user_type":"student"}
    type: object
info:
  contact:
    name: Senya
  description: Simple swagger implementation in Go HTTP
  title: Go Rest API with Swagger for school system
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login to the system and receive an authentication token.
      parameters:
      - description: User login information
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/restTypes.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restTypes.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/restTypes.ErrorResponse'
      summary: Authenticate user
      tags:
      - Authentication
  /auth/testToken:
    get:
      consumes:
      - application/json
      description: Greets the user with "Hello, {userName}!" if he's authorized
      produces:
      - application/json
      responses:
        "200":
          description: Hello, {userName}!
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/restTypes.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/restTypes.ErrorResponse'
      security:
      - Bearer: []
      summary: Greet the user if he's authorized
      tags:
      - Authentication
    post:
      consumes:
      - application/json
      description: Greets the user with "Hello, {userName}!" if he's authorized
      produces:
      - application/json
      responses:
        "200":
          description: Hello, {userName}!
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/restTypes.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/restTypes.ErrorResponse'
      security:
      - Bearer: []
      summary: Greet the user if he's authorized
      tags:
      - Authentication
  /data/daily-schedule/:
    get:
      consumes:
      - '*/*'
      description: Retrieves the daily schedule image for the current date from the
        database
      produces:
      - image/jpeg
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get the daily schedule image for the current date
      tags:
      - DailySchedule
    post:
      consumes:
      - multipart/form-data
      description: Uploads the daily schedule image for the current date to the database
      parameters:
      - description: The daily schedule image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/restTypes.LoginResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Upload the daily schedule image for the current date
      tags:
      - DailySchedule
  /data/daily-schedule/{date}:
    delete:
      description: Deletes the daily schedule for a specific date from the database
      parameters:
      - description: The date of the daily schedule to delete (in YYYY-MM-DD format)
        in: path
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restTypes.LoginResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete the daily schedule for a specific date
      tags:
      - DailySchedule
    put:
      description: Updates the daily schedule image for a specific date in the database
      parameters:
      - description: The date of the daily schedule to update (in YYYY-MM-DD format)
        in: path
        name: date
        required: true
        type: string
      - description: 'The updated image file for the daily schedule (limit: 32 MB)'
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restTypes.LoginResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update the daily schedule for a specific date
      tags:
      - DailySchedule
  /data/food-menu/:
    get:
      consumes:
      - application/json
      description: Retrieves the breakfast, lunch, and dinner menu for the current
        date from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/databaseTypes.FoodMenu'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get the food menu for the current date
      tags:
      - FoodMenu
    post:
      consumes:
      - application/json
      description: Add a new food menu to the database
      operationId: addFoodMenu
      parameters:
      - description: Food menu to add
        in: body
        name: foodMenu
        required: true
        schema:
          $ref: '#/definitions/databaseTypes.FoodMenu'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restTypes.LoginResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Add a food menu
      tags:
      - FoodMenu
  /data/food-menu/{date}:
    delete:
      description: Delete a food menu from the database for a given date
      operationId: DeleteFoodMenu
      parameters:
      - description: The date of the food menu to delete
        in: path
        name: date
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restTypes.DeleteResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete a food menu
      tags:
      - FoodMenu
  /data/food-menu/{id}:
    put:
      consumes:
      - application/json
      description: Update the food menu with the specified ID
      parameters:
      - description: ID of the food menu to update
        in: path
        name: id
        required: true
        type: string
      - description: New values for the food menu
        in: body
        name: foodMenu
        required: true
        schema:
          $ref: '#/definitions/databaseTypes.FoodMenu'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/restTypes.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/restTypes.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/restTypes.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/restTypes.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a food menu
      tags:
      - FoodMenu
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
